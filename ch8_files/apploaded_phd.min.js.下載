// 请求相关方法

$(document).ajaxStart((function() {})).ajaxStop((function() {})).ajaxComplete((function() {})).ajaxSuccess((function() {}))
	.ajaxError((function(event, jqXHR, settings, thrownError) {
		var errMsg = "";
		if (0 === jqXHR.status) return errMsg = "Not connected.\nPlease verify your network connection.", $(document).trigger(
			"app.error.ajaxtimeout", [{
				message: errMsg,
				jqXHR: jqXHR
			}]), !1;
		errMsg = 404 == jqXHR.status ? "Server understood the request, but request content was invalid. [404]" : 401 ==
			jqXHR.status ? "Unauthorized access. [401]" : 403 == jqXHR.status ? "Forbidden resource can't be accessed. [403]" :
			500 == jqXHR.status ? "Internal Server Error [500]." : 503 == jqXHR.status ? "Service unavailable. [500]." :
			"parsererror" === thrownError ? "Requested JSON parse failed." : "timeout" === thrownError ? "Time out error." :
			"abort" === thrownError ? "Ajax request aborted." : "Unknown  Error.\n" + jqXHR.responseText;
		try {
			// alert(errMsg);
			smalltips(errMsg, {
				bg: "bg-red text-white padding-lg"
			})
		} catch(e) {
			alert(errMsg)
		}
		logme(thrownError), $(document).trigger("app.error.ajaxerror", [thrownError])
	}));
var APIURL = location.href;

function webcall(url, method, data, done, fail, timeout) {
	timeout = timeout || 3e4;
	var dfr = $.Deferred();
	"function" == typeof data && (fail = done = data), dfr.resolve(done);
	var passdata = $.extend({
		f: method,
		time: + +new Date
	}, data);
	"undefined" != typeof appconfig && $.extend(passdata, {
		ip: appconfig.ip || "",
		ua: getUAString() || ""
	});
	var jqxhr = $.ajax({
		method: "POST",
		url: url,
		data: passdata,
		xhr: function() {
			var myXhr = $.ajaxSettings.xhr();
			return myXhr.upload && myXhr.upload.addEventListener("progress", ajaxProgress, !1), myXhr
		},
		timeout: timeout,
		cache: !0,
		beforeSend: function(xhr) {
			appconfig && xhr.setRequestHeader("appsid", appconfig.appsid), $(document).trigger("ajax.beforeSend")
		}
	});
	return jqxhr.success((function(returndata) {
		$(document).trigger("app.login", [returndata, done, fail])
	})), jqxhr.error((function(xhr, textStatus) {
		infome("error:" + textStatus), runScript(fail, xhr, textStatus)
	})), dfr
}

function ajaxProgress(e) {
	if (e.lengthComputable) {
		var max = e.total,
			current, percentage;
		100 * e.loaded / max >= 100 ? $(document).trigger("app.upload.completed", [e]) : $(document).trigger(
			"app.upload.progress", [e])
	}
}
$(document).on("app.error.startload", (function(e, data) {
	logme("app.error.startload"), logme(data);
	var msg =
		"<h2>系統繁忙中..<br>請後再載入系統!<br><br>O sistema é agitado em ..<br>Por favor, aguarde 30 segundos e, em seguida, carregado no sistema!<br><br>System is busy...<br><br>Please wait 30 seconds before loading the system!</h2>";
	return isDebugLog && "" !== data.message && (msg = msg + "<br><br>Event : app.error.startload > Error:" + data.message),
		document.write(msg), window.status = "ready_to_print", !1
})).on("app.login", (function(e, data, done, fail) {
	try {
		if ((data.appname || "").indexOf("login") < 0) {
			if (0 == data.islogined) {
				var myurl = getAppConfig().logout_url;
				return loadAppTop(myurl), !1
			}
			runScript(done, data), $(document).trigger("app.logined", [done, data])
		} else runScript(done, data)
	} catch(e) {
		logme("app.login > error:" + e.message), window.status = "ready_to_print", runScript(fail, data)
	}
})).on("app.logout", (function(e, data) {
	logme("event : app.logout");
	var myurl = getAppConfig().logout_url;
	try {
		getLogout({
			usrsid: appconfig.appsid
		}, (function(data) {
			loadAppTop(myurl)
		}))
	} catch(e) {
		loadAppTop(myurl)
	}
})).on("app.logined", (function(e, data) {}));
var loadAppTop = function(myurl) {
	window.self === window.top ? myReplace(myurl) : (location.replace(""), window.open(myurl, "_top"))
};

function setAppLoadingProgress(p, success) {
	var progress = $(".progress");
	if (0 == progress.length) {
		var s =
			'<div class="progress pos-center-middle" style="width:260px;margin-left:-130px;z-index:6999"><div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%"><span class="sr-only">70% Complete</span></div></div>';
		$("body").append(juicer(s, {
			p: 0
		})), progress = $(".progress")
	} else progress.is(":visible") || progress.removeClass("hide").show();
	"remove" == p ? progress.remove() : (p = parseInt(p) || 0, progress.find(".progress-bar").width(p + "%").find("span").text(
		p + "%")), runScript(success, p)
}

function setAppDebugLogInit() {
	isShowLog = !1, isDebugLog = isShowLog, logme("Debug Mode: ip:" + appconfig.ip + " isShowLog:" + isShowLog +
		" isDebugLog:" + isDebugLog), logme("=========AppConfig=========="), logme(appconfig), logme(
		"============================")
}

function fixIE8PreventDefault() {
	try {
		isIE8 && (Event = Event || window.Event, Event.prototype.stopPropagation = Event.prototype.stopPropagation ||
			function() {
				this.cancelBubble = !0
			}, Event.prototype.preventDefault = Event.prototype.preventDefault || function() {
				this.returnValue = !1
			})
	} catch(e) {}
}

function getStorage(k) {
	try {
		var info = {};
		return (info = localStorage ? localStorage.getItem(k) : $.cookie(k)) && (info = JSON.parse(Base64.decode(info))),
			info
	} catch(e) {
		return logme(e.message), ""
	}
}

function setStorage(k, v, success, fail) {
	try {
		var oldv = getStorage(k);
		oldv = $.extend(oldv, v);
		var binfo = Base64.encode(JSON.stringify(oldv));
		localStorage ? localStorage.setItem(k, binfo) : $.cookie(k, binfo), runScript(success, oldv)
	} catch(e) {
		logme(e.message)
	}
}

function removeStorage(k) {
	localStorage ? localStorage.removeItem(k) : $.removeCookie(k)
}

function getAppSetting(myApptype, myAppsid) {
	var _setAppSetting = function(data, lang) {
			try {
				//jQuery.extend() 函数用于将一个或多个对象的内容合并到目标对象。
				appconfig = appconfig || {lang: "ch"}, 
				$.extend(appconfig, data), 
				appconfig.apptype = APPTYPE || "", $.each(appconfig.control.js, (function(k, v) {
					appendJsScript(v)
				})), $.each(appconfig.control.css, (function(k, v) {
					k.indexOf(".en") < 0 && appendCssScript(v), k.indexOf(".en") >= 0 && "ch" !== appconfig.lang && appendCssScript(
						v)
				}));
				try {
					delete appconfig.control.js, delete appconfig.control.css
				} catch(e) {
					window.status = "ready_to_print", logme(e)
				}
				"" !== (lang || "") && (appconfig.lang = lang), setTimeout((function() {
					"" !== (appconfig.appid || "") && $("[rel='shortcut icon'],[rel='icon']").attr("href", "?f=icon&appid=" +
						appconfig.appid), $(document).trigger("app.ready")
				}), 0)
			} catch(e) {
				$(document).trigger("app.error.startload", [e])
			}
		},
	passdata = {};
	// 发送请求获取应用程序哈希并保存
	webcall(APIURL, "getAppHash", passdata, (function(data) {
		//定义缓存key【应用设置缓存】
		storagekey = "appsetting";
		//获取对应缓存【应用哈希值缓存】
		var appsetinghash = getStorage("appsetinghash");
		/**
		 * 页面未有应用哈希值缓存则：1.把接口返回参数缓存为新应用哈希值缓存，2.清除旧应用设置缓存
		 * 已存在应用哈希值缓存则：	1.判断接口返回的值与缓存中的值是否相同，
		 * 							2.把接口返回参数缓存为新应用哈希值缓存，
		 * 							3.清除旧应用设置缓存
		 * 发送请求获取应用程序设置
		 */	
		
		null == appsetinghash ? (setStorage("appsetinghash", data), removeStorage(storagekey)) : (data.apphash || "") !==
			(appsetinghash.apphash || "") && (setStorage("appsetinghash", data), removeStorage(storagekey)), webcall(APIURL,
				"getAppSetting", $.extend({//遍历数组元素,并修改第一个对象
					lty: "server"
				}, passdata), (function(data) {
					data.vd && (data = JSON.parse(Base64.decode(data.vd))), setStorage(storagekey, data), _setAppSetting(data)
				}))
	}))
}
jQuery,
fixIE8PreventDefault(),
	setTimeout((function() {
		var keyStr = 'bbbbbbbbbbbbbbbb'; //一般key为一个字符串 
		var now = new Date();
		var today = new Date(now.getFullYear() + '/' + (now.getMonth() + 1) + '/' + now.getDate()).getTime();
		var yesterday = new Date(today-1000*60*60*24*1).getTime();
		// 转换旧版历史数据
		if(localStorage.getItem('ede8b9e85812b2f6f61b947ce79fafff')){
			var data = JSON.parse(Base64.decode(localStorage.getItem('ede8b9e85812b2f6f61b947ce79fafff')));
			localStorage.setItem('lang', data.defaultLang);//保存语言设置
			var formdata = data.formdata;
			var m = {
				'macau': '', //id_idnbr
				'nonresidentworker': "ao", //id_nrwid
				"travelhkmo": 'ch', //id_travelhkmo
				"passport": 'oth_pass', //id_passport
				"other": '', //id_other
			}
			
			for (var i = 0; i < formdata.length; i++) {
				if(formdata[i].id_type=="macau"){//只转换澳门证件类型的缓存数据
					var n = {
						'macau': formdata[i].id_idnbr, //id_idnbr
						'nonresidentworker': formdata[i].id_nrwid, //id_nrwid
						"travelhkmo": formdata[i].id_travelhkmo, //id_travelhkmo
						"passport":  formdata[i].id_passport, //id_passport
						"other": formdata[i].id_other, //id_other
					}
					
	 				formdata[i].creationDate = yesterday;
					formdata[i].entryMode="";
					formdata[i].entryMode_air= "";
					formdata[i].entryMode_load= "";
					formdata[i].entryMode_waterway= "";
					formdata[i].idNum= n[formdata[i].id_type];
					formdata[i].idType= formdata[i].id_type=="macau"?"macauCard":"othCard";
					formdata[i].idcardType= m[formdata[i].id_type];
					formdata[i].perType= "";
					formdata[i].recordDate= "";
					formdata[i].symptau= "";
					formdata[i].tr_flight_seatno= "";
					formdata[i].tr_flightno= "";
					formdata[i].waterwayPlace= "";
					formdata[i].waterwaySeatNum= "";
					localStorage.setItem('healthdeclaration' + formdata[i].idNum, JSON.stringify(formdata[i]));
				}
			}
			//删除旧版数据
			localStorage.removeItem('ede8b9e85812b2f6f61b947ce79fafff');
		}
		
		window.alert = function(name){
		                var iframe = document.createElement("IFRAME");
		                iframe.style.display="none";
		                document.documentElement.appendChild(iframe);
		                window.frames[0].window.alert(name);
		                iframe.parentNode.removeChild(iframe);
		            }
		window.confirm = function (message) {
						var iframe = document.createElement("IFRAME");
						iframe.style.display = "none";
						iframe.setAttribute("src", 'data:text/plain,');
						document.documentElement.appendChild(iframe);
						var alertFrame = window.frames[0];
						var result = alertFrame.window.confirm(message);
						iframe.parentNode.removeChild(iframe);
						return result;
					}
		window.addEventListener('popstate', function () {
			let page = location.pathname.substring(location.pathname.lastIndexOf('/')+1);
			let lang = getAppConfig().lang; 
			if(page.indexOf('3')!=-1){
				if(sessionStorage.toMacao){
					try{
						wx.miniProgram.navigateBack({delta:1});
					}catch(e){
						console.log(e);
					}
				}
			}
		});
		
	}), 0);
	
var keyStr = 'bbbbbbbbbbbbbbbb'; //一般key为一个字符串 
var hideAddress = true;
