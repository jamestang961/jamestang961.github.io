// 富文本编辑器

function getTextNodesIn(e, t) {
	function a(e) {
		if (3 == e.nodeType)(t || o.test(e.nodeValue)) && n.push(e);
		else
			for (var l = 0, i = e.childNodes.length; l < i; ++l) a(e.childNodes[l])
	}
	var n = [],
		o = /\S/;
	return a(e), n
}

function setSelectionRange(e, t, a) {
	if (document.createRange && window.getSelection) {
		var n = document.createRange();
		n.selectNodeContents(e);
		for (var o, l, i = getTextNodesIn(e), r = !1, s = 0, c = 0; l = i[c++];) {
			if (o = s + l.length, !r && t >= s && (t < o || t == o && c <= i.length) && (n.setStart(l, t - s), r = !0), r && a <=
				o) {
				n.setEnd(l, a - s);
				break
			}
			s = o
		}
		var d = window.getSelection();
		d.removeAllRanges(), d.addRange(n)
	} else if (document.selection && document.body.createTextRange) {
		var p = document.body.createTextRange();
		p.moveToElementText(e), p.collapse(!0), p.moveEnd("character", a), p.moveStart("character", t), p.select()
	}
}! function(e) {
	var t = {
		saveSelection: function() {
			e(this).data("editor").focus(), window.getSelection ? (sel = window.getSelection(), sel.getRangeAt && sel.rangeCount &&
					e(this).data("currentRange", sel.getRangeAt(0))) : document.selection && document.selection.createRange ? e(this)
				.data("currentRange", document.selection.createRange()) : e(this).data("currentRange", null)
		},
		restoreSelection: function(t, a) {
			var n = e(this).data("currentRange");
			if (n)
				if (window.getSelection) {
					if (t)
						if (n.deleteContents(), "html" == a) {
							var o = document.createElement("div");
							o.innerHTML = t;
							for (var l, i = document.createDocumentFragment(); l = o.firstChild;) i.appendChild(l);
							n.insertNode(i)
						} else n.insertNode(document.createTextNode(t));
					sel = window.getSelection(), sel.removeAllRanges(), sel.addRange(n)
				} else document.selection && n.select && (n.select(), t && ("html" == a ? n.pasteHTML(t) : n.text = t))
		},
		restoreIESelection: function() {
			var t = e(this).data("currentRange");
			t && (window.getSelection ? (sel = window.getSelection(), sel.removeAllRanges(), sel.addRange(t)) : document.selection &&
				t.select && t.select())
		},
		insertTextAtSelection: function(e, t) {
			var a, n;
			if (window.getSelection) {
				if ((a = window.getSelection()).getRangeAt && a.rangeCount) {
					(n = a.getRangeAt(0)).deleteContents();
					var o = document.createTextNode(e);
					if ("html" == t) {
						var l = document.createElement("div");
						l.innerHTML = e;
						for (var i, r = document.createDocumentFragment(); i = l.firstChild;) r.appendChild(i);
						n.insertNode(r)
					} else n.insertNode(o), n.selectNode(o);
					a.removeAllRanges(), (n = n.cloneRange()).collapse(!1), a.addRange(n)
				}
			} else document.selection && document.selection.createRange && ((n = document.selection.createRange()).pasteHTML(e),
				n.select())
		},
		imageWidget: function() {
			var a = e("<div/>", {
					class: "row"
				}).append(e("<div/>", {
					id: "imgErrMsg"
				})),
				n = e("<div/>", {
					class: "tabbable tabs-left"
				}),
				o = e("<ul/>", {
					class: "nav nav-tabs"
				}).append(e("<li/>", {
					class: "active"
				}).append(e("<a/>", {
					href: "#uploadImageBar",
					"data-toggle": "tab"
				}).html("From Computer"))).append(e("<li/>").append(e("<a/>", {
					href: "#imageFromLinkBar",
					"data-toggle": "tab"
				}).html("From URL"))),
				l = e("<div/>", {
					class: "tab-content"
				}),
				i = e("<div/>", {
					id: "uploadImageBar",
					class: "tab-pane active"
				});
			handleFileSelect = function(a) {
				for (var n, o = a.target.files, l = 0; n = o[l]; l++)
					if (n.type.match("image.*") && n.name.match(/(?:gif|jpg|png|jpeg)$/)) {
						var i = new FileReader;
						i.onload = function(t) {
							return function(a) {
								var n = e("<li/>", {
										class: "col-xs-12 col-sm-6 col-md-3 col-lg-3"
									}),
									o = e("<a/>", {
										href: "javascript:void(0)",
										class: "thumbnail"
									});
								e("<img/>", {
									src: a.target.result,
									title: escape(t.name)
								}).appendTo(o).click(function() {
									e("#imageList").data("current", e(this).attr("src"))
								});
								n.append(o).appendTo(e("#imageList"))
							}
						}(n), i.readAsDataURL(n)
					} else t.showMessage.apply(this, ["imgErrMsg", "Invalid file type"])
			};
			var r = e("<input/>", {
				type: "file",
				class: "inline-form-control",
				multiple: "multiple"
			});
			r.on("change", handleFileSelect), i.append(r);
			var s = e("<div/>", {
					id: "imageFromLinkBar",
					class: "tab-pane"
				}),
				c = e("<div/>", {
					class: "input-group"
				});
			e("<input/>", {
				type: "url",
				class: "form-control",
				id: "imageURL",
				placeholder: "Enter URL"
			}).appendTo(c), e("<button/>", {
				class: "btn btn-success",
				type: "button"
			}).html("Go!").click(function() {
				var a = e("#imageURL").val();
				if ("" == a) return t.showMessage.apply(this, ["imgErrMsg", "Please enter image url"]), !1;
				var n = e("<li/>", {
						class: "span6 col-xs-12 col-sm-6 col-md-3 col-lg-3"
					}),
					o = e("<a/>", {
						href: "javascript:void(0)",
						class: "thumbnail"
					});
				e("<img/>", {
					src: a
				}).error(function() {
					return t.showMessage.apply(this, ["imgErrMsg", "Invalid image url"]), !1
				}).load(function() {
					e(this).appendTo(o).click(function() {
						e("#imageList").data("current", e(this).attr("src"))
					}), n.append(o).appendTo(e("#imageList"))
				})
			}).appendTo(e("<span/>", {
				class: "input-group-btn form-control-button-right"
			}).appendTo(c));
			s.append(c), l.append(i).append(s), n.append(o).append(l);
			var d = e("<div/>", {
				class: "col-xs-12 col-sm-12 col-md-12 col-lg-12"
			});
			e("<ul/>", {
				class: "thumbnails padding-top list-unstyled",
				id: "imageList"
			}).appendTo(d);
			return a.append(n).append(d), a
		},
		tableWidget: function(t) {
			var a = "";
			void 0 !== t && (a = "Edt");
			return e("<div/>", {
				class: "row-fluid"
			}).append(e("<div/>", {
				id: "tblErrMsg" + a
			})).append(e("<form/>", {
				id: "tblForm" + a
			}).append(e("<div/>", {
				class: "row"
			}).append(e("<div/>", {
				id: "tblInputsLeft" + a,
				class: "col-xs-12 col-sm-6 col-md-6 col-lg-6"
			}).append(e("<label/>", {
				for: "tblRows" + a,
				text: "Rows"
			})).append(e("<input/>", {
				id: "tblRows" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 2
			})).append(e("<label/>", {
				for: "tblColumns" + a,
				text: "Columns"
			})).append(e("<input/>", {
				id: "tblColumns" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 2
			})).append(e("<label/>", {
				for: "tblWidth" + a,
				text: "Width"
			})).append(e("<input/>", {
				id: "tblWidth" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 400
			})).append(e("<label/>", {
				for: "tblHeight" + a,
				text: "Height"
			})).append(e("<input/>", {
				id: "tblHeight" + a,
				type: "text",
				class: "form-control form-control-width"
			}))).append(e("<div/>", {
				id: "tblInputsRight" + a,
				class: "col-xs-12 col-sm-6 col-md-6 col-lg-6"
			}).append(e("<label/>", {
				for: "tblAlign" + a,
				text: "Alignment"
			})).append(e("<select/>", {
				id: "tblAlign" + a,
				class: "form-control form-control-width"
			}).append(e("<option/>", {
				text: "Choose",
				value: ""
			})).append(e("<option/>", {
				text: "Left",
				value: "left"
			})).append(e("<option/>", {
				text: "Center",
				value: "center"
			})).append(e("<option/>", {
				text: "Right",
				value: "right"
			}))).append(e("<label/>", {
				for: "tblBorder" + a,
				text: "Border size"
			})).append(e("<input/>", {
				id: "tblBorder" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 1
			})).append(e("<label/>", {
				for: "tblCellspacing" + a,
				text: "Cell spacing"
			})).append(e("<input/>", {
				id: "tblCellspacing" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 1
			})).append(e("<label/>", {
				for: "tblCellpadding" + a,
				text: "Cell padding"
			})).append(e("<input/>", {
				id: "tblCellpadding" + a,
				type: "text",
				class: "form-control form-control-width",
				value: 1
			})))))
		},
		imageAttributeWidget: function() {
			return e("<div/>", {
				class: "row-fluid"
			}).append(e("<div/>", {
				id: "imageErrMsg"
			})).append(e("<input/>", {
				id: "imgAlt",
				type: "text",
				class: "form-control form-control-link ",
				placeholder: "Alt Text"
			})).append(e("<input/>", {
				id: "imgTarget",
				class: "form-control form-control-link ",
				type: "text",
				placeholder: "Link Target"
			})).append(e("<input/>", {
				id: "imgHidden",
				type: "hidden"
			}))
		},
		getHTMLTable: function(t, a, n) {
			for (var o = e("<table/>", {
					class: "table"
				}), l = 0; l < n.length; l++) "" != n[l].value && ("width" == n[l].attribute || "height" == n[l].attribute ? o.css(
				n[l].attribute, n[l].value) : o.attr(n[l].attribute, n[l].value));
			for (l = 1; l <= t; l++) {
				for (var i = e("<tr/>"), r = 1; r <= a; r++) {
					e("<td/>").html("&nbsp;").appendTo(i)
				}
				i.appendTo(o)
			}
			return o
		},
		init: function(a) {
			var n = [{
					name: "Black",
					hex: "#000000"
				}, {
					name: "MediumBlack",
					hex: "#444444"
				}, {
					name: "LightBlack",
					hex: "#666666"
				}, {
					name: "DimBlack",
					hex: "#999999"
				}, {
					name: "Gray",
					hex: "#CCCCCC"
				}, {
					name: "DimGray",
					hex: "#EEEEEE"
				}, {
					name: "LightGray",
					hex: "#F3F3F3"
				}, {
					name: "White",
					hex: "#FFFFFF"
				}, {
					name: "libreak",
					hex: null
				}, {
					name: "Red",
					hex: "#FF0000"
				}, {
					name: "Orange",
					hex: "#FF9900"
				}, {
					name: "Yellow",
					hex: "#FFFF00"
				}, {
					name: "Lime",
					hex: "#00FF00"
				}, {
					name: "Cyan",
					hex: "#00FFFF"
				}, {
					name: "Blue",
					hex: "#0000FF"
				}, {
					name: "BlueViolet",
					hex: "#8A2BE2"
				}, {
					name: "Magenta",
					hex: "#FF00FF"
				}, {
					name: "libreak",
					hex: null
				}, {
					name: "LightPink",
					hex: "#FFB6C1"
				}, {
					name: "Bisque",
					hex: "#FCE5CD"
				}, {
					name: "BlanchedAlmond",
					hex: "#FFF2CC"
				}, {
					name: "LightLime",
					hex: "#D9EAD3"
				}, {
					name: "LightCyan",
					hex: "#D0E0E3"
				}, {
					name: "AliceBlue",
					hex: "#CFE2F3"
				}, {
					name: "Lavender",
					hex: "#D9D2E9"
				}, {
					name: "Thistle",
					hex: "#EAD1DC"
				}, {
					name: "LightCoral",
					hex: "#EA9999"
				}, {
					name: "Wheat",
					hex: "#F9CB9C"
				}, {
					name: "NavajoWhite",
					hex: "#FFE599"
				}, {
					name: "DarkSeaGreen",
					hex: "#B6D7A8"
				}, {
					name: "LightBlue",
					hex: "#A2C4C9"
				}, {
					name: "SkyBlue",
					hex: "#9FC5E8"
				}, {
					name: "LightPurple",
					hex: "#B4A7D6"
				}, {
					name: "PaleVioletRed",
					hex: "#D5A6BD"
				}, {
					name: "IndianRed",
					hex: "#E06666"
				}, {
					name: "LightSandyBrown",
					hex: "#F6B26B"
				}, {
					name: "Khaki",
					hex: "#FFD966"
				}, {
					name: "YellowGreen",
					hex: "#93C47D"
				}, {
					name: "CadetBlue",
					hex: "#76A5AF"
				}, {
					name: "DeepSkyBlue",
					hex: "#6FA8DC"
				}, {
					name: "MediumPurple",
					hex: "#8E7CC3"
				}, {
					name: "MediumVioletRed",
					hex: "#C27BA0"
				}, {
					name: "Crimson",
					hex: "#CC0000"
				}, {
					name: "SandyBrown",
					hex: "#E69138"
				}, {
					name: "Gold",
					hex: "#F1C232"
				}, {
					name: "MediumSeaGreen",
					hex: "#6AA84F"
				}, {
					name: "Teal",
					hex: "#45818E"
				}, {
					name: "SteelBlue",
					hex: "#3D85C6"
				}, {
					name: "SlateBlue",
					hex: "#674EA7"
				}, {
					name: "VioletRed",
					hex: "#A64D79"
				}, {
					name: "Brown",
					hex: "#990000"
				}, {
					name: "Chocolate",
					hex: "#B45F06"
				}, {
					name: "GoldenRod",
					hex: "#BF9000"
				}, {
					name: "Green",
					hex: "#38761D"
				}, {
					name: "SlateGray",
					hex: "#134F5C"
				}, {
					name: "RoyalBlue",
					hex: "#0B5394"
				}, {
					name: "Indigo",
					hex: "#351C75"
				}, {
					name: "Maroon",
					hex: "#741B47"
				}, {
					name: "DarkRed",
					hex: "#660000"
				}, {
					name: "SaddleBrown",
					hex: "#783F04"
				}, {
					name: "DarkGoldenRod",
					hex: "#7F6000"
				}, {
					name: "DarkGreen",
					hex: "#274E13"
				}, {
					name: "DarkSlateGray",
					hex: "#0C343D"
				}, {
					name: "Navy",
					hex: "#073763"
				}, {
					name: "MidnightBlue",
					hex: "#20124D"
				}, {
					name: "DarkMaroon",
					hex: "#4C1130"
				}],
				o = [{
					name: "Exclamation ",
					text: "!"
				}, {
					name: "At",
					text: "@"
				}, {
					name: "Hash",
					text: "#"
				}, {
					name: "Percentage",
					text: "%"
				}, {
					name: "Uppercase",
					text: "^"
				}, {
					name: "Ampersand",
					text: "&"
				}, {
					name: "Asterisk",
					text: "*"
				}, {
					name: "OpenBracket",
					text: "("
				}, {
					name: "CloseBracket",
					text: ")"
				}, {
					name: "Underscore",
					text: "_"
				}, {
					name: "Hiphen",
					text: "-"
				}, {
					name: "Plus",
					text: "+"
				}, {
					name: "Equalto",
					text: "="
				}, {
					name: "OpenSquareBracket",
					text: "["
				}, {
					name: "CloseSquareBracket",
					text: "]"
				}, {
					name: "OpenCurly",
					text: "{"
				}, {
					name: "CloseCurly",
					text: "}"
				}, {
					name: "Pipe",
					text: "|"
				}, {
					name: "Colon",
					text: ":"
				}, {
					name: "Semicolon",
					text: ";"
				}, {
					name: "Single quote",
					text: "&#39;"
				}, {
					name: "Double quote",
					text: "&#34;"
				}, {
					name: "Left single curly quote",
					text: "&lsquo;"
				}, {
					name: "right single curly quote",
					text: "&rsquo;"
				}, {
					name: "Forward-slash",
					text: "&#47;"
				}, {
					name: "Back-slash",
					text: "&#92;"
				}, {
					name: "LessThan",
					text: "<"
				}, {
					name: "GreaterThan",
					text: ">"
				}, {
					name: "QuestionMark",
					text: "?"
				}, {
					name: "Tilda",
					text: "~"
				}, {
					name: "Grave accent",
					text: "`"
				}, {
					name: "Micron",
					text: "&micro;"
				}, {
					name: "Paragraph sign",
					text: "&para;"
				}, {
					name: "Plus/minus",
					text: "&plusmn;"
				}, {
					name: "Trademark",
					text: "&trade;"
				}, {
					name: "Copyright",
					text: "&copy;"
				}, {
					name: "Registered",
					text: "&reg;"
				}, {
					name: "Section",
					text: "&sect;"
				}, {
					name: "right double angle quotes",
					text: "&#187;"
				}, {
					name: "fraction one quarter",
					text: "&#188;"
				}, {
					name: "fraction one half",
					text: "&#189;"
				}, {
					name: "fraction three quarters",
					text: "&#190;"
				}, {
					name: "Dollar",
					text: "$"
				}, {
					name: "Euro",
					text: "&euro;"
				}, {
					name: "Pound",
					text: "&pound;"
				}, {
					name: "Yen",
					text: "&yen;"
				}, {
					name: "Cent",
					text: "&#162;"
				}, {
					name: "IndianRupee",
					text: "&#8377;"
				}],
				l = {
					fonteffects: !0,
					texteffects: !0,
					aligneffects: !0,
					textformats: !0,
					actions: !0,
					insertoptions: !0,
					extraeffects: !0,
					advancedoptions: !0,
					screeneffects: !0,
					fonts: {
						select: !0,
						default: "字型",
						tooltip: "Fonts",
						commandname: "fontName",
						custom: null
					},
					font_size: {
						select: !0,
						default: "字型大小",
						tooltip: "Font Size",
						commandname: "fontSize",
						custom: null
					},
					styles: {
						select: !0,
						default: "格式",
						tooltip: "Paragraph Format",
						commandname: "formatBlock",
						custom: null
					},
					color: {
						text: "A",
						icon: "fa fa-font text-red",
						tooltip: "Text/Background Color",
						commandname: null,
						custom: function(a) {
							var o = 0,
								l = e("<div/>", {
									id: "paletteCntr",
									class: "activeColour",
									css: {
										display: "none",
										width: "335px"
									}
								}).click(function(e) {
									e.stopPropagation()
								}),
								i = e("<div/>", {
									id: "colorpellete"
								}),
								r = e("<ul />", {
									id: "color_ui"
								}).append(e("<li />").css({
									width: "145px",
									display: "Block",
									height: "25px"
								}).html("<div>Text Color</div>")),
								s = e("<div/>", {
									id: "bg_colorpellete"
								}),
								c = e("<ul />", {
									id: "bgcolor_ui"
								}).append(e("<li />").css({
									width: "145px",
									display: "Block",
									height: "25px"
								}).html("<div>Background Color</div>"));
							if (e("#contentarea").data("colorBtn") ? (o = 1, e("#contentarea").data("colorBtn", null)) : e("#contentarea")
								.data("colorBtn", 1), 0 == o) {
								for (var d = 0; d < n.length; d++) null != n[d].hex ? (r.append(e("<li />").css("background-color", n[d].hex)
									.mousedown(function(e) {
										e.preventDefault()
									}).click(function() {
										var a = t.rgbToHex.apply(this, [e(this).css("background-color")]);
										t.restoreSelection.apply(this), t.setStyleWithCSS.apply(this), document.execCommand("forecolor", !1, a),
											e("#paletteCntr").remove(), e("#contentarea").data("colorBtn", null)
									})), c.append(e("<li />").css("background-color", n[d].hex).mousedown(function(e) {
									e.preventDefault()
								}).click(function() {
									var a = t.rgbToHex.apply(this, [e(this).css("background-color")]);
									t.restoreSelection.apply(this), t.setStyleWithCSS.apply(this), document.execCommand("backColor", !1, a),
										e("#paletteCntr").remove(), e("#contentarea").data("colorBtn", null)
								}))) : (r.append(e("<li />").css({
									width: "145px",
									display: "Block",
									height: "5px"
								})), c.append(e("<li />").css({
									width: "145px",
									display: "Block",
									height: "5px"
								})));
								r.appendTo(i), c.appendTo(s), i.appendTo(l), s.appendTo(l), l.insertAfter(a), e("#paletteCntr").slideDown(
									"slow")
							} else e("#paletteCntr").remove()
						}
					},
					bold: {
						text: "B",
						icon: "fa fa-bold",
						tooltip: "Bold",
						commandname: "bold",
						custom: null
					},
					italics: {
						text: "I",
						icon: "fa fa-italic",
						tooltip: "Italics",
						commandname: "italic",
						custom: null
					},
					underline: {
						text: "U",
						icon: "fa fa-underline",
						tooltip: "Underline",
						commandname: "underline",
						custom: null
					},
					strikeout: {
						text: "Strikeout",
						icon: "fa fa-strikethrough",
						tooltip: "Strike Through",
						commandname: "strikeThrough",
						custom: null
					},
					ol: {
						text: "N",
						icon: "fa fa-list-ol",
						tooltip: "Insert/Remove Numbered List",
						commandname: "insertorderedlist",
						custom: null
					},
					ul: {
						text: "Bullet",
						icon: "fa fa-list-ul",
						tooltip: "Insert/Remove Bulleted List",
						commandname: "insertunorderedlist",
						custom: null
					},
					undo: {
						text: "undo",
						icon: "fa fa-undo",
						tooltip: "Undo",
						commandname: "undo",
						custom: null
					},
					redo: {
						text: "redo",
						icon: "fa fa-repeat",
						tooltip: "Redo",
						commandname: "redo",
						custom: null
					},
					l_align: {
						text: "leftalign",
						icon: "fa fa-align-left",
						tooltip: "Align Left",
						commandname: "justifyleft",
						custom: null
					},
					r_align: {
						text: "rightalign",
						icon: "fa fa-align-right",
						tooltip: "Align Right",
						commandname: "justifyright",
						custom: null
					},
					c_align: {
						text: "centeralign",
						icon: "fa fa-align-center",
						tooltip: "Align Center",
						commandname: "justifycenter",
						custom: null
					},
					justify: {
						text: "justify",
						icon: "fa fa-align-justify",
						tooltip: "Justify",
						commandname: "justifyfull",
						custom: null
					},
					unlink: {
						text: "Unlink",
						icon: "fa fa-unlink",
						tooltip: "Unlink",
						commandname: "unlink",
						custom: null
					},
					insert_link: {
						modal: !0,
						modalId: "InsertLink",
						icon: "fa fa-link",
						tooltip: "Insert Link",
						modalHeader: "Insert Hyperlink",
						modalBody: e("<div/>", {
							class: "form-group"
						}).append(e("<div/>", {
							id: "errMsg"
						})).append(e("<input/>", {
							type: "text",
							id: "inputText",
							class: "form-control form-control-link1 ",
							placeholder: "Text to Display"
						})).append(e("<input/>", {
							type: "text",
							id: "inputUrl",
							required: !0,
							class: "form-control form-control-link1",
							placeholder: "Enter URL"
						})).append(e("<input/>", {
							type: "text",
							id: "inputTarget",
							required: !0,
							class: "form-control form-control-link1",
							placeholder: "Enter URL Target"
						})),
						beforeLoad: function() {
							e("#inputText").val(""), e("#inputUrl").val(""), e("#inputTarget").val("_blank"), e(".alert").alert("close"),
								"" != e(this).data("currentRange") && e("#inputText").val(e(this).data("currentRange"))
						},
						onSave: function() {
							var a = e("#inputText").val(),
								n = e("#inputUrl").val(),
								o = e("#inputTarget").val(),
								l = e(this).data("currentRange");
							if ("" == n) return t.showMessage.apply(this, ["errMsg", "Please enter url"]), !1;
							if (!n.match(/(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/)) return t
								.showMessage.apply(this, ["errMsg", "Enter valid url"]), !1;
							if ("" == l && "" == a && (a = n), navigator.userAgent.match(/MSIE/i)) {
								var i = '<a href="' + n + '" target="_blank">' + a + "</a>";
								t.restoreSelection.apply(this, [i, "html"])
							} else t.restoreSelection.apply(this, [a]), document.execCommand("createLink", !1, n);
							return e("#contentarea").find('a[href="' + n + '"]').each(function() {
								"" !== o ? e(this).attr("target", o) : e(this).attr("target", "_blank")
							}), e(".alert").alert("close"), e("#InsertLink").modal("hide"), e("#contentarea").focus(), !1
						}
					},
					insert_img: {
						modal: !0,
						modalId: "InsertImage",
						icon: "fa fa-picture-o",
						tooltip: "Insert Image",
						modalHeader: "Insert Image",
						modalBody: t.imageWidget.apply(this),
						beforeLoad: function() {
							e("#imageURL").val(""), e("#uploadImageBar :input").val(""), e("#imageList").data("current", "")
						},
						onSave: function() {
							if (t.restoreSelection.apply(this), !e("#imageList").data("current")) return t.showMessage.apply(this, [
								"imgErrMsg", "Please select an image"
							]), !1;
							if (navigator.userAgent.match(/MSIE/i)) {
								var a = '<img src="' + e("#imageList").data("current") + '"/>';
								t.restoreSelection.apply(this, [a, "html"])
							} else document.execCommand("insertimage", !1, e("#imageList").data("current"));
							e("#InsertImage").modal("hide"), e("#contentarea").focus()
						}
					},
					insert_table: {
						modal: !0,
						modalId: "InsertTable",
						icon: "fa fa-table",
						tooltip: "Insert Table",
						modalHeader: "Insert Table",
						modalBody: t.tableWidget.apply(this),
						beforeLoad: function() {
							e("#tblForm").each(function() {
								this.reset()
							})
						},
						onSave: function() {
							t.restoreSelection.apply(this);
							var a = e("#tblRows").val(),
								n = e("#tblColumns").val(),
								o = e("#tblWidth").val(),
								l = e("#tblHeight").val(),
								i = e("#tblAlign").val(),
								r = e("#tblBorder").val(),
								s = e("#tblCellspacing").val(),
								c = e("#tblCellpadding").val(),
								d = /^[0-9]+$/,
								p = /^auto$|^[+-]?[0-9]+\.?([0-9]+)?(px|em|ex|%|in|cm|mm|pt|pc)?$/gi,
								m = /^[0-9]+\.?([0-9])?$/;
							if (!a.match(d)) return t.showMessage.apply(this, ["tblErrMsg", "Rows must be a positive number"]), !1;
							if (!n.match(d)) return t.showMessage.apply(this, ["tblErrMsg", "Columns must be a positive number"]), !1;
							if ("" != o && !o.match(p)) return t.showMessage.apply(this, ["tblErrMsg",
								"Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"
							]), !1;
							if ("" != l && !l.match(p)) return t.showMessage.apply(this, ["tblErrMsg",
								"Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"
							]), !1;
							if ("" != r && !r.match(m)) return t.showMessage.apply(this, ["tblErrMsg",
								"Border size must be a positive number"
							]), !1;
							if ("" != s && !s.match(m)) return t.showMessage.apply(this, ["tblErrMsg",
								"Cell spacing must be a positive number"
							]), !1;
							if ("" != c && !c.match(m)) return t.showMessage.apply(this, ["tblErrMsg",
								"Cell padding must be a positive number"
							]), !1;
							var u = e("<div/>"),
								h = [{
									attribute: "align",
									value: i
								}, {
									attribute: "border",
									value: r
								}, {
									attribute: "cellspacing",
									value: s
								}, {
									attribute: "cellpadding",
									value: c
								}, {
									attribute: "width",
									value: o
								}, {
									attribute: "height",
									value: l
								}];
							t.getHTMLTable.apply(this, [a, n, h]).appendTo(u), navigator.userAgent.match(/MSIE/i) ? t.restoreSelection.apply(
								this, [u.html(), "html"]) : document.execCommand("insertHTML", !1, u.html()), e("#InsertTable").modal(
								"hide"), e("#contentarea").focus()
						}
					},
					hr_line: {
						text: "HR",
						icon: "fa fa-minus",
						tooltip: "Horizontal Rule",
						commandname: "insertHorizontalRule",
						custom: null
					},
					block_quote: {
						text: "Block Quote",
						icon: "fa fa-quote-right",
						tooltip: "Block Quote",
						commandname: null,
						custom: function() {
							t.setStyleWithCSS.apply(this), navigator.userAgent.match(/MSIE/i) ? document.execCommand("indent", !1, null) :
								document.execCommand("formatBlock", !1, "<blockquote>")
						}
					},
					indent: {
						text: "Indent",
						icon: "fa fa-indent",
						tooltip: "Increase Indent",
						commandname: "indent",
						custom: null
					},
					outdent: {
						text: "Outdent",
						icon: "fa fa-outdent",
						tooltip: "Decrease Indent",
						commandname: "outdent",
						custom: null
					},
					print: {
						text: "Print",
						icon: "fa fa-print",
						tooltip: "Print",
						commandname: null,
						custom: function() {
							oDoc = document.getElementById("contentarea");
							var e = window.open("", "_blank",
								"width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
							e.document.open(), e.document.write(
								'<!doctype html><html><head><title>Print</title></head><body onload="print();">' + oDoc.innerHTML +
								"</body></html>"), e.document.close()
						}
					},
					rm_format: {
						text: "Remove format",
						icon: "fa fa-eraser",
						tooltip: "Remove Formatting",
						commandname: "removeformat",
						custom: null
					},
					select_all: {
						text: "Select all",
						icon: "fa fa-file-text",
						tooltip: "Select All",
						commandname: null,
						custom: function() {
							document.execCommand("selectall", null, null)
						}
					},
					togglescreen: {
						text: "Toggle Screen",
						icon: "fa fa-arrows-alt",
						tooltip: "Toggle Screen",
						commandname: null,
						custom: function(t, a) {
							e(".Editor-container").toggleClass("fullscreen");
							var n = 0;
							e("#statusbar").length && (n = e("#statusbar").height()), e(".Editor-container").hasClass("fullscreen") ? (e(
								".Editor-container").removeClass("fullscreen"), e("#contentarea").height(e("#contentarea").data(
								"orgheight")), e("#contentarea").removeData("orgheight")) : (e("#contentarea").data("orgheight", e(
								"#contentarea").height()), e(".Editor-container").addClass("fullscreen"), e("#contentarea").css({
								height: e(".Editor-container").height() - (e("#menuBarDiv").height() + n) - 13
							}))
						}
					},
					splchars: {
						text: "S",
						icon: "fa fa-asterisk",
						tooltip: "Insert Special Character",
						commandname: null,
						custom: function(a) {
							t.restoreIESelection.apply(this);
							var n = 0,
								l = e("<div/>", {
									id: "specialchar",
									class: "specialCntr",
									css: {
										display: "none"
									}
								}).click(function(e) {
									e.stopPropagation()
								}),
								i = e("<ul />", {
									id: "special_ui"
								});
							if (e("#contentarea").data("splcharsBtn") ? (n = 1, e("#contentarea").data("splcharsBtn", null)) : e(
									"#contentarea").data("splcharsBtn", 1), 0 == n) {
								for (var r = 0; r < o.length; r++) i.append(e("<li />").html(o[r].text).attr("title", o[r].name).mousedown(
									function(e) {
										e.preventDefault()
									}).click(function(a) {
									if (navigator.userAgent.match(/MSIE/i)) {
										var n = e(this).html();
										t.insertTextAtSelection.apply(this, [n, "html"])
									} else document.execCommand("insertHTML", !1, e(this).html());
									e("#specialchar").remove(), e("#contentarea").data("splcharsBtn", null)
								}));
								i.prependTo(l), l.insertAfter(a), e("#specialchar").slideDown("slow")
							} else e("#specialchar").remove()
						}
					},
					source: {
						text: "Source",
						icon: "fa fa-code",
						tooltip: "Source",
						commandname: null,
						custom: function(e, a) {
							t.getSource.apply(this, [e, a])
						}
					},
					params: {
						obj: null
					}
				},
				i = {
					texteffects: ["color", "bold", "italics", "underline"],
					aligneffects: ["l_align", "c_align", "r_align", "justify"],
					textformats: ["indent", "outdent", "block_quote", "ol", "ul"],
					fonteffects: ["fonts", "font_size", "styles"],
					actions: ["undo", "redo"],
					insertoptions: ["insert_link", "unlink", "insert_img", "insert_table"],
					extraeffects: ["strikeout", "hr_line", "splchars"],
					advancedoptions: ["print", "rm_format", "select_all", "source"],
					screeneffects: ["togglescreen"]
				},
				r = e.extend({
					texteffects: !0,
					aligneffects: !0,
					textformats: !0,
					fonteffects: !0,
					actions: !0,
					insertoptions: !0,
					extraeffects: !0,
					advancedoptions: !0,
					screeneffects: !0,
					bold: !0,
					italics: !0,
					underline: !0,
					ol: !0,
					ul: !0,
					undo: !0,
					redo: !0,
					l_align: !0,
					r_align: !0,
					c_align: !0,
					justify: !0,
					insert_link: !0,
					unlink: !0,
					insert_img: !0,
					hr_line: !0,
					block_quote: !0,
					source: !0,
					strikeout: !0,
					indent: !0,
					outdent: !0,
					fonts: {
						"新細明體": "新細明體",
						"微軟正黑體": "微軟正黑體",
						"Sans serif": "arial,helvetica,sans-serif",
						Serif: "times new roman,serif",
						Wide: "arial black,sans-serif",
						Narrow: "arial narrow,sans-serif",
						"Comic Sans MS": "comic sans ms,sans-serif",
						"Courier New": "courier new,monospace",
						Garamond: "garamond,serif",
						Georgia: "georgia,serif",
						Tahoma: "tahoma,sans-serif",
						"Trebuchet MS": "trebuchet ms,sans-serif",
						Verdana: "verdana,sans-serif"
					},
					styles: {
						"Heading 1": "<h1>",
						"Heading 2": "<h2>",
						"Heading 3": "<h3>",
						"Heading 4": "<h4>",
						"Heading 5": "<h5>",
						"Heading 6": "<h6>",
						Paragraph: "<p>"
					},
					print: !0,
					rm_format: !0,
					status_bar: !0,
					font_size: {
						Small: "2",
						Normal: "3",
						Medium: "4",
						Large: "5",
						Huge: "6"
					},
					color: n,
					splchars: o,
					insert_table: !0,
					select_all: !0,
					togglescreen: !0
				}, a),
				s = e("<div/>", {
					class: "row-fluid Editor-container"
				});
			e(this).hide().after(s);
			var c = e("<div/>", {
					id: "menuBarDiv",
					class: "row-fluid"
				}).prependTo(s),
				d = e("<div/>", {
					class: "Editor-editor",
					css: {
						overflow: "auto"
					},
					contenteditable: "true",
					id: "contentarea"
				}).appendTo(s);
			if (r.status_bar) {
				var p = e("<div/>", {
					id: "statusbar",
					class: "row-fluid",
					unselectable: "on"
				}).appendTo(s);
				e("#contentarea").keyup(function(a) {
					var n = t.getWordCount.apply(this);
					e("#statusbar").html('<div class="label">Words : ' + n + "</div>")
				})
			}
			e(this).data("menuBar", c), e(this).data("editor", d), e(this).data("statusBar", p);
			for (var m in l)
				if (r[m])
					if (m in i) {
						for (var u = e("<div/>", {
								class: "btn-group"
							}), h = 0; h < i[m].length; h++) {
							var g = i[m][h];
							if (r[g]) {
								var f = t.createMenuItem.apply(this, [l[g], r[g], !0]);
								u.append(f)
							}
							r[g] = !1
						}
						c.append(u)
					} else {
						f = t.createMenuItem.apply(this, [l[m], r[m], !0]);
						c.append(f)
					}
			else if (r[m] in i)
				for (var v in i[m]) r[v] = !1;
			e(document.body).mousedown(function(t) {
				var a = e(t.target);
				a.parents().andSelf().is("#context-menu") || e("#context-menu").remove(), a.parents().andSelf().is(
						"#specialchar") || '<i class="fa fa-asterisk"></i>' == a.closest("a").html() || e("#specialchar").is(
						":visible") && (e("#contentarea").data("splcharsBtn", null), e("#specialchar").remove()), a.parents().andSelf()
					.is("#paletteCntr") || '<i class="fa fa-font"></i>' == a.closest("a").html() || e("#paletteCntr").is(
						":visible") && (e("#contentarea").data("colorBtn", null), e("#paletteCntr").remove())
			}), e("#contentarea").bind("contextmenu", function(a) {
				e("#context-menu").length && e("#context-menu").remove();
				var n = e("<div/>", {
						id: "context-menu"
					}).css({
						position: "absolute",
						top: a.pageY,
						left: a.pageX,
						"z-index": 9999
					}).click(function(e) {
						e.stopPropagation()
					}),
					o = e("<ul/>", {
						class: "dropdown-menu on",
						role: "menu"
					});
				a.preventDefault(), e(a.target).is("a") ? (t.createLinkContext.apply(this, [a, o]), o.appendTo(n), n.appendTo(
						"body")) : e(a.target).is("td") ? (t.createTableContext.apply(this, [a, o]), o.appendTo(n), n.appendTo("body")) :
					e(a.target).is("img") && (t.createImageContext.apply(this, [a, o]), o.appendTo(n), n.appendTo("body"))
			})
		},
		createLinkContext: function(t, a) {
			var n = e("<a/>", {
					id: "rem_link",
					href: "javascript:void(0)",
					text: "Remove Link"
				}).click(function(t) {
					return function() {
						e(t.target).contents().unwrap(), e("#context-menu").remove()
					}
				}(t)),
				o = e("<a/>", {
					id: "edit_link",
					href: "javascript:void(0)",
					text: "Edit Link"
				}).click(function(t) {
					return function() {
						e("#context-menu .on").removeClass("on");
						var a = e(t.target).contents().text(),
							n = e(t.target).attr("href"),
							o = e(t.target).attr("target");
						e("[href='#InsertLink']").trigger("click"), setSelectionRange(e(t.target).get(0), 0, e(t.target).width()),
							setTimeout(function() {
								e("#inputText").val(a), e("#inputUrl").val(n), e("#inputTarget").val(o)
							}, 0)
					}
				}(t));
			e("<li/>").append(n).append(o).appendTo(a)
		},
		createImageContext: function(a, n) {
			var o = t.imageAttributeWidget.apply(this, ["edit"]);
			t.createModal.apply(this, ["imgAttribute", "Image Attributes", o, function() {
				var a = e("#imgAlt").val(),
					n = e("#imgTarget").val();
				if ("" == a) return t.showMessage.apply(this, ["imageErrMsg", "Please enter image alternative text"]), !1;
				if ("" != n && !n.match(
						/(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/)) return t.showMessage
					.apply(this, ["imageErrMsg", "Please enter valid url"]), !1;
				if ("" != e("#imgHidden").val()) {
					var o = e("#imgHidden").val();
					e("#" + o).attr("alt", a), "" != n ? e("#wrap_" + o).length ? e("#wrap_" + o).attr("href", n) : e("#" + o).wrap(
						e("<a/>", {
							id: "wrap_" + o,
							href: n,
							target: "_blank"
						})) : e("#wrap_" + o).length && e("#" + o).unwrap()
				}
				e("#imgAttribute").modal("hide"), e("#contentarea").focus()
			}]);
			var l = e("<a/>", {
				href: "#imgAttribute",
				text: "Image Attributes",
				"data-toggle": "modal"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove();
					var a = (new Date).getTime();
					if (e("#imgAlt").val(e(t.target).closest("img").attr("alt")), e("#imgTarget").val(""), void 0 !== e(t.target)
						.closest("img").attr("id")) {
						var n = e(t.target).closest("img").attr("id");
						e("#imgHidden").val(n), e("#wrap_" + n).length ? e("#imgTarget").val(e("#wrap_" + n).attr("href")) : e(
							"#imgTarget").val("")
					} else e(t.target).closest("img").attr("id", "img_" + a), e("#imgHidden").val("img_" + a)
				}
			}(a));
			n.append(e("<li/>").append(l)).append(e("<li/>").append(e("<a/>", {
				text: "Remove Image"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove(), e(t.target).closest("img").remove()
				}
			}(a))))
		},
		createTableContext: function(a, n) {
			e("#editProperties").remove();
			var o = t.tableWidget.apply(this, ["edit"]);
			t.createModal.apply(this, ["editProperties", "Table Properties", o, function() {
				var n = e("#tblWidthEdt").val(),
					o = e("#tblHeightEdt").val(),
					l = e("#tblBorderEdt").val(),
					i = e("#tblAlignEdt").val(),
					r = e("#tblCellspacingEdt").val(),
					s = e("#tblCellpaddingEdt").val(),
					c = /^auto$|^[+-]?[0-9]+\.?([0-9]+)?(px|em|ex|%|in|cm|mm|pt|pc)?$/gi,
					d = /^[0-9]+\.?([0-9])?$/;
				return "" != n && !n.match(c) || "" != o && !o.match(c) ? (t.showMessage.apply(this, ["tblErrMsgEdt",
					"Please enter positive number with or without a valid CSS measurement unit (px,em,ex,%,in,cm,mm,pt,pc)"
				]), !1) : "" == l || l.match(d) ? "" == r || r.match(d) ? "" == s || s.match(d) ? (e(a.target).closest(
						"table").css("width", n), "" != o && e(a.target).closest("table").css("height", o), e(a.target).closest(
						"table").attr("align", i), e(a.target).closest("table").attr("border", l), e(a.target).closest("table").attr(
						"cellspacing", r), e(a.target).closest("table").attr("cellpadding", s), e("#editProperties").modal("hide"),
					void e("#contentarea").focus()) : (t.showMessage.apply(this, ["tblErrMsgEdt",
					"Cell padding must be a positive number"
				]), !1) : (t.showMessage.apply(this, ["tblErrMsgEdt", "Cell spacing must be a positive number"]), !1) : (t.showMessage
					.apply(this, ["tblErrMsgEdt", "Border size must be a positive number"]), !1)
			}]);
			var l = e("<a/>", {
				href: "#editProperties",
				text: "Table Properties",
				"data-toggle": "modal"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove(), e("#tblRowsEdt").val(e(t.target).closest("table").prop("rows").length), e(
							"#tblColumnsEdt").val(e(t.target).closest("table").find("tr")[0].cells.length), e("#tblRowsEdt").attr(
							"disabled", "disabled"), e("#tblColumnsEdt").attr("disabled", "disabled"), e("#tblWidthEdt").val(e(t.target)
							.closest("table").get(0).style.width), e("#tblHeightEdt").val(e(t.target).closest("table").get(0).style.height),
						e("#tblAlignEdt").val(e(t.target).closest("table").attr("align")), e("#tblBorderEdt").val(e(t.target).closest(
							"table").attr("border")), e("#tblCellspacingEdt").val(e(t.target).closest("table").attr("cellspacing")), e(
							"#tblCellpaddingEdt").val(e(t.target).closest("table").attr("cellpadding"))
				}
			}(a));
			n.append(e("<li/>", {
				class: "dropdown-submenu",
				css: {
					display: "block"
				}
			}).append(e("<a/>", {
				tabindex: "-1",
				href: "javascript:void(0)",
				text: "Row"
			})).append(e("<ul/>", {
				class: "dropdown-menu"
			}).append(e("<li/>").append(e("<a/>", {
				id: "tbl_addrow",
				href: "javascript:void(0)",
				text: "Add Row"
			}).click(function(t) {
				return function() {
					e(t.target).closest("table").prop("rows").length;
					for (var a = e(t.target).closest("table").find("tr")[0].cells.length, n = e("<tr/>"), o = 1; o <= a; o++) {
						e("<td/>").html("&nbsp;").appendTo(n)
					}
					n.appendTo(e(t.target).closest("table")), e("#context-menu").remove()
				}
			}(a)))).append(e("<li/>").append(e("<a/>", {
				text: "Remove Row"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove(), e(t.target).closest("tr").remove()
				}
			}(a)))))).append(e("<li/>", {
				class: "dropdown-submenu",
				css: {
					display: "block"
				}
			}).append(e("<a/>", {
				tabindex: "-1",
				href: "javascript:void(0)",
				text: "Column"
			})).append(e("<ul/>", {
				class: "dropdown-menu"
			}).append(e("<li/>").append(e("<a/>", {
				id: "tbl_addcolumn",
				href: "javascript:void(0)",
				text: "Add Column"
			}).click(function(t) {
				return function() {
					e(t.target).closest("table").prop("rows").length, e(t.target).closest("table").find("tr")[0].cells.length;
					e(t.target).closest("table").find("tr").each(function() {
						e(this).append(e("<td/>"))
					}), e("#context-menu").remove()
				}
			}(a)))).append(e("<li/>").append(e("<a/>", {
				text: "Remove Column"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove();
					var a = e(t.target).closest("td").length;
					e(t.target).closest("table").find("tr").each(function() {
						e(this).find("td:eq(" + a + ")").remove()
					})
				}
			}(a)))))), n.append(e("<li/>").append(l)).append(e("<li/>", {
				class: "divider"
			})).append(e("<li/>").append(e("<a/>", {
				text: "Remove Table"
			}).click(function(t) {
				return function() {
					e("#context-menu").remove(), e(t.target).closest("table").remove()
				}
			}(a))))
		},
		createModal: function(t, a, n, o) {
			var l = e("<a/>", {
				href: "#" + t,
				role: "button",
				class: "btn btn-default",
				"data-toggle": "modal"
			});
			e("<div/>", {
				id: t,
				class: "modal fade",
				tabindex: "-1",
				role: "dialog",
				"aria-labelledby": "h3_" + t,
				"aria-hidden": "true"
			}).append(e("<div>", {
				class: "modal-dialog"
			}).append(e("<div>", {
				class: "modal-content"
			}).append(e("<div>", {
				class: "modal-header"
			}).append(e("<button/>", {
				type: "button",
				class: "close",
				"data-dismiss": "modal",
				"aria-hidden": "true"
			}).html("x")).append(e("<h3/>", {
				id: "h3_" + t
			}).html(a))).append(e("<div>", {
				class: "modal-body"
			}).append(n)).append(e("<div>", {
				class: "modal-footer"
			}).append(e("<button/>", {
				type: "button",
				class: "btn btn-default",
				"data-dismiss": "modal",
				"aria-hidden": "true"
			}).html("Cancel")).append(e("<button/>", {
				type: "button",
				class: "btn btn-success"
			}).html("Done").mousedown(function(e) {
				e.preventDefault()
			}).click(function(e) {
				return function() {
					o.apply(e)
				}
			}(this)))))).appendTo("body");
			var i = parseInt(e(".modal").css("z-index")) || 0;
			return e("#" + t).css({
				"z-index": i + 1
			}), l
		},
		createMenuItem: function(a, n, o) {
			if (a.select) {
				var l = e("<div/>", {
						class: "btn-group"
					}),
					i = e("<ul/>", {
						class: "dropdown-menu"
					});
				l.append(e("<a/>", {
					class: "btn btn-default dropdown-toggle",
					"data-toggle": "dropdown",
					href: "javascript:void(0)",
					title: a.tooltip
				}).html(a.default).append(e("<span/>", {
					class: "caret"
				})).mousedown(function(e) {
					e.preventDefault()
				})), e.each(n, function(t, a) {
					var n = e("<li/>");
					e("<a/>", {
						tabindex: "-1",
						href: "javascript:void(0)"
					}).html(t).appendTo(n), n.click(function() {
						e(this).parent().parent().data("value", a), e(this).parent().parent().trigger("change")
					}), i.append(n)
				});
				var r = "change"
			} else {
				if (a.modal) {
					l = t.createModal.apply(this, [a.modalId, a.modalHeader, a.modalBody, a.onSave]), i = e("<i/>");
					return a.icon ? i.addClass(a.icon) : i.html(a.text), l.append(i), l.mousedown(function(e, t, a) {
						return function(n) {
							n.preventDefault(), t.saveSelection.apply(e), a && a.apply(e)
						}
					}(this, t, a.beforeLoad)), l.attr("title", a.tooltip), l
				}
				l = e("<a/>", {
					href: "javascript:void(0)",
					class: "btn btn-default"
				}), i = e("<i/>");
				a.icon ? i.addClass(a.icon) : i.html(a.text);
				r = "click"
			}
			if (a.custom ? l.bind(r, function(n, o) {
					return function() {
						t.saveSelection.apply(n), a.custom.apply(n, [e(this), o])
					}
				}(this, a.params)) : (l.data("commandName", a.commandname), l.data("editor", e(this).data("editor")), l.bind(r,
					function() {
						t.setTextFormat.apply(this)
					})), l.attr("title", a.tooltip), l.css("cursor", "pointer"), l.append(i), o) return l;
			e(this).data("menuBar").append(l)
		},
		setTextFormat: function() {
			return t.setStyleWithCSS.apply(this), document.execCommand(e(this).data("commandName"), !1, e(this).data("value") ||
				null), e(this).data("editor").focus(), !1
		},
		getSource: function(t, a) {
			var n = 0;
			t.data("state") ? (n = 1, t.data("state", null)) : t.data("state", 1);
			var o, l = e(this).data("editor");
			if (0 == n) o = document.createTextNode(l.html()), l.empty(), l.attr("contenteditable", !1), preElement = e(
				"<pre/>", {
					contenteditable: !0
				}), preElement.append(o), l.append(preElement), t.parent().siblings().hide(), t.siblings().hide();
			else {
				var i = "";
				ch = l.find(">:first-child").contents().filter(function() {
						return 3 == this.nodeType
					}), ch = ch[0], "undefined" != typeof ch && (i = ch.textContent), l.html(i), l.attr("contenteditable", !0), t.parent()
					.siblings().show(), t.siblings().show()
			}
		},
		countWords: function(a) {
			for (var n = 0, o = a.contents().filter(function() {
					return 3 == this.nodeType
				}), l = 0; l < o.length; l++) text = o[l].textContent, text = text.replace(/[^-\w\s]/gi, " "), text = e.trim(text),
				n += text.split(/\s+/).length;
			a.children().each(function() {
				n += t.countWords.apply(this, [e(this)])
			});
			return n
		},
		getWordCount: function() {
			return t.countWords.apply(this, [e("#contentarea")])
		},
		rgbToHex: function(e) {
			return e = e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/), "#" + ("0" + parseInt(e[1], 10).toString(16)).slice(-2) +
				("0" + parseInt(e[2], 10).toString(16)).slice(-2) + ("0" + parseInt(e[3], 10).toString(16)).slice(-2)
		},
		showMessage: function(t, a) {
			e("<div/>", {
				class: "alert alert-danger"
			}).append(e("<button/>", {
				type: "button",
				class: "close",
				"data-dismiss": "alert",
				html: "x"
			})).append(e("<span/>").html(a)).appendTo(e("#" + t)), setTimeout(function() {
				e(".alert").alert("close")
			}, 3e3)
		},
		getText: function() {
			var t = "";
			return e(e(this).parent()).find("#contentarea pre[contenteditable]").length > 0 ? t = e(e(this).parent()).find(
				"#contentarea pre[contenteditable]").html() : e(e(this).parent()).find("#contentarea").html(), t
		},
		setText: function(t) {
			e(e(this).parent()).find("#contentarea").html(t)
		},
		setStyleWithCSS: function() {
			if (navigator.userAgent.match(/MSIE/i)) try {
				Editor.execCommand("styleWithCSS", 0, !1)
			} catch(e) {
				try {
					Editor.execCommand("useCSS", 0, !0)
				} catch(e) {
					try {
						Editor.execCommand("styleWithCSS", !1, !1)
					} catch(e) {}
				}
			} else document.execCommand("styleWithCSS", null, !0)
		}
	};
	e.fn.Editor = function(a) {
		return t[a] ? t[a].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof a && a ? void e.error(
			"Method " + a + " does not exist on jQuery.Editor") : t.init.apply(this, arguments)
	}
}(jQuery);
